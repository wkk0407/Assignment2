public class Q2 {
    public static void q2() {
        String ciphertext = "OAYMSYCHVCOAFGUGSYIPULODMVZHTUXOZHDXUFIVVHVYLMHFMBOXIYOASZTUBHTUYAKLNOOSIGDRHSIEEIUNMABHTUXOZHESSEXCEIVNVOOSYAPRPOQDNYIZLCGEXLHUTUVLTREHSYITKPBMYXLQDXVHTUSEGFARAOPOGHYVAOMEDRSYMVSYMBUBVHLYZBVOSMSTMRPODXVHTUCYVODARNMAVIWGBHTUMGCDHUHSAMIHYSTUXOZHSYYMINYSTUKLZBNOVYSYMTRLCVDARNFMESIZIVDVHZMGHSYAPRPONESZTUBHTUQYPVTYUVSYIPULODMVZHTUGMEBBYTUWLUWSTMNBMBHWLIECBSYMBDKHVLQGHYBPVPYMRPOKDBYTUXOHUKDBYTUXOKLHQYMEYTUYMVODQTMAGDAZGGMKAOACVHUSYIZVCMBNXIZYLVUIESYVCSYIVDRXIADITQLIDUHVYYVPHYSTURVCBYVUOVYSYGWGWXVAHMRPOCLULSYBZUGQLAOPOXHMRPOQDGMQFPTDXRDSBBZYVSYIVDXLFITCDAGVGPTOXGMUVUGYVSYPTDMBHYQDQSYIZPSZPLFESTYDQSYIZITSTMRPODXLHTULGAGVIXHCDBHIHDXOUPAIMHYMBWIVLITOACVHUSYUBGWYDIDLNBZRDGXLPGHYAPRPOCLULSYITKPBMYXLQOACVHUGWYDIDLNBZRDYAMNLXPTMRPOCLULSYPTLQOXODSOMLHUVYDXLUHYDMDOBIHBDYPVBYYAPRPOCLULSYBZUGQLAOPOHUVYDXLUHYDMDOBUEBXNBZXVKAYVAPGHLCYAPRPOCLULOAYMSYHOVYZIPMHSTPBYLPGDSRBZYVSYPBIPMBVDAHESSMQFPTDXYAPRPOSYITKPBMYXLQYABHUGMIAHMRPODXUFIEIHTULHDYOXOAHFGWDARNMAVISYVCESHSPHZQLCSEBHTUPMOVCBSYBTVYYVRMZHTUGMEBNOVYSYUBYAPRPOTBQDBMTUYAIDAUIDIGYVEHLXLPRDGOBZRLSYMBDKSZLCWLIECVKLCTMRPODXVHTUMAMYHTOXPTYMKGKLWIUZSTIGRNUGBSVYTUMAVIUGSYIPULODMVZHTUGMEBNOVYRLAORTUTPTVDVIOVZHMBSYIPYAPRPODXVHTUSQMBBEMBCHMYYQYVVIVLUTUPOASEHUPBUVYAPRPOSYBZUGQLAOPORGIBDXYVYXCTMRPONEHZMYHEXDZBOSBMPIERMBUVSYVCTUPUNSYBIHSTMRPODXLHAOGMUVSUHSPVGYDROAYMSYCHPXYMHUVYDQYAMNTISYGWKLCLXVVHSURNQDBYTUHTOXPTYMFLVYPLURLQQLGYMVKNZHCDGFTUGUWUGYYEBZOAYMSYCTMRPOTUSYDMNSHVVYSYUBYAPRPOGLLCHSPHQAXDMAVIUGPKMYHDUIDOYAPRPOFSMBIUYAIDOUPABTIVUIEBHTOXBZTUYXLQHTMRPOVCDXQYVCUVVYNESHMNIVCSTUBMGWRDIHUZMYLCKPBMYXLQHSPHQAXDMAVIUGSYIPULODMVKDGMEBNOVYPLPOQNLPLUHYVDDGBEMBCDEBDXTRXOUGHTMRPODKZBXOAGDOLQBHTUHSBMOPSYMBDKHZDAVCUVYAPRPODXVHTUMAMYHTOXPTYMKGKLWIUZHZOXTBSUHUOACBSYUBSYIVMLGHLPLHMRBZSURNPMHSTBOABUYVCLEBIHOASESYUGWPKPGHLGEYVYTUHYMYPVHUEMAGVSTUXOZHDKZBYRPTMRPOUWQMIFGIDAGDCYADUDLCCBYVSYBZUEDQRQCVGIOASHDYITMXDXSGBHVYTUKLZBXYMRPODXVHTUSEGFARAOPOXHDPNSHZLCSYADOADFGWCVGIOACBSYUBSYIVMLRGIBDXYVWLUPLGSYVDDSGWPUNSCBYVKLNOSYITYDBMOASESZLCCDNOQLXQYAPRPOVDSYDMNSTUKLCGYLGENGEHRTDXVNCSTUSQMBUVXOFGDMYVZHTUHPXBBMBHYAPRPODXVHTUHUMYVYYCYVAQSYBZUGQLAOPOGHDARNMAVIDXUFIVEIAUIHYSTUXOZHYVSYIVDXANOACBSYMTZIBMVDVSMGUVDMSZTUBHTUQYPVTYUVSYITYDBMVCDVHSDXLHZBXCEIOAKNDNMABHTUMXBZSCNXPBUBNXLCHTMRPODXVHTUCOIWAQBUZSCDCBSYITYBPVUYVOKPXBGMUVSYIPVDDRSLOCXPHSSYMBAVOAQHIVDAZGGMKASYVCVIVHVYTUIPMBVDAHESHOVYFSVCHYVDILUVDRLQLCZPVHTUSEGFARAOPOXHMRPOLCSYIVMLGDOCOAFGDRSYIBXOCGHSADBZSYITNHONCYUPOASZIPIHSBBZXVKAYVSYMBAVAHMRPOUGYLPIKLCTMRPOCLULOAYMSYHOVYSYBTITCEDVGFGIVGBZLQVDAPDARNSYMBELMBXVXFNHSEILPTMRBZVYTUYMVOLXLPXHMRPOBMPOXQUVSYIVMLRB";

        char[][] key = {
                {'G', 'N', 'R', 'X', 'B'},
                {'S', 'H', 'Y', 'C', 'T'},
                {'W', 'F', 'Q', 'K', 'Z'},
                {'L', 'D', 'O', 'A', 'V'},
                {'I', 'U', 'M', 'P', 'E'}
        };
        StringBuilder plaintext = new StringBuilder();

        int pos = 0;
        while (pos < ciphertext.length()) {

            if (pos == ciphertext.length() - 1) {
                ciphertext += "X";
            }

            char[] bigram = {ciphertext.charAt(pos), ciphertext.charAt(pos + 1)};
            if (bigram[0] == bigram[1]) {
                bigram[1] = 'X';
                pos++;
            } else {
                pos += 2;
            }

            int[] first = search(key, bigram[0]);
            int[] second = search(key, bigram[1]);
            int row1 = 0, row2 = 0;
            int col1 = 0, col2 = 0;
            int first_row = first[0];
            int first_col = first[1];
            int second_row = second[0];
            int second_col = second[1];

            if (first_row == second_row) {
                row1 = first_row;
                row2 = first_row;
                col1 = first_col == 0 ? 4 : first_col - 1;
                col2 = second_col == 0 ? 4: second_col - 1;
            } else if (first_col == second_col) {
                col1 = first_col;
                col2 = second_col;
                row1 = first_row == 0 ? 4 : first_row - 1;
                row2 = second_row == 0 ? 4 : second_row - 1;
            } else {
                row1 = first_row;
                col1 = second_col;
                row2 = second_row;
                col2 = first_col;
            }

            plaintext.append(key[row1][col1]);
            plaintext.append(key[row2][col2]);
        }


        System.out.println(plaintext.toString());
    }

    public static int[] search(char[][] key, char c) {
        int[] res = new int[2];

        for (int i = 0; i < key.length; i++) {
            for (int j = 0; j < key[0].length; j++) {
                if (key[i][j] == c) {
                    res[0] = i;
                    res[1] = j;
                    break;
                }
            }
        }
        return res;
    }

    public static void main(String[] args) {
        q2();
    }
}
